import pygame
import sys

pygame.init()
screen = pygame.display.set_mode((1143, 677))
pygame.display.set_caption("PH levels or something")
clock = pygame.time.Clock()
back = (0, 255, 255)
#makes size and load all below images
def load_image(path, size=(50, 150)):
    try:
        return pygame.transform.scale(pygame.image.load(path), size)
    except:
        print(f"Missing: {path}")
        sys.exit()

# Load all images at certain sizes
tube1 = load_image("water1.png")
tube2 = load_image("water2.png")
tube3 = load_image("water3.png")
tube0 = load_image("pixil-frame-0 (9).png")
acid1 = load_image("pixil-frame-0 (12).png", (75, 75))
acid2 = load_image("pixil-frame-0 (17).png")
acid3 = load_image("bat.png")
base1 = load_image("pixil-frame-0 (15).png", (75, 100))
base2 = load_image("pixil-frame-0 (11).png", (100, 150))
base3 = load_image("pixil-frame-0 (16).png", (100, 150))
water = load_image("bottle.png", (50, 150))
box = load_image("box.png", (175, 175))
gbox = load_image("boxg.png", (175, 175))
rbox = load_image("boxr.png", (175, 175))

# Load instruction images
instructions_icon = load_image("instructions_icon.png", (100, 100))
instructions_big = load_image("instructions_big.png", (1143, 677))
instructions_rect = pygame.Rect(1020, 560, 100, 100)
showing_instructions = False

# Load result images
results = []
for i in range(18, 39):
    results.append(load_image(f"pixil-frame-0 ({i}).png"))

#items that can be cloend
originals = [
    {"name": "tube1", "img": tube1, "rect": pygame.Rect(20, 520, 50, 150)},
    {"name": "tube2", "img": tube2, "rect": pygame.Rect(90, 520, 50, 150)},
    {"name": "tube3", "img": tube3, "rect": pygame.Rect(160, 520, 50, 150)},
    {"name": "tube0", "img": tube0, "rect": pygame.Rect(230, 520, 50, 150)},
    {"name": "acid1", "img": acid1, "rect": pygame.Rect(300, 590, 75, 75)},
    {"name": "acid2", "img": acid2, "rect": pygame.Rect(390, 520, 50, 150)},
    {"name": "acid3", "img": acid3, "rect": pygame.Rect(480, 520, 100, 150)},
    {"name": "base1", "img": base1, "rect": pygame.Rect(550, 570, 100, 150)},
    {"name": "base2", "img": base2, "rect": pygame.Rect(650, 520, 100, 150)},
    {"name": "base3", "img": base3, "rect": pygame.Rect(770, 520, 100, 150)},
    {"name": "water", "img": water, "rect": pygame.Rect(890, 520, 50, 150)},
]
#pictures in the boxes
stillobjects = [
    {"name": "Sacid1", "img": acid1, "rect": pygame.Rect(50, 50, 75,75)},
    {"name": "Sacid2", "img": acid2, "rect": pygame.Rect(220, 10, 50, 150)},
    {"name": "Sacid3", "img": acid3, "rect": pygame.Rect(385, 15, 100, 150)},
    {"name": "Sbase1", "img": base1, "rect": pygame.Rect(530, 40, 100, 150)},
    {"name": "Sbase2", "img": base2, "rect": pygame.Rect(680, 10, 100, 150)},
    {"name": "Sbase3", "img": base3, "rect": pygame.Rect(840, 10, 100, 150)},
    {"name": "Swater", "img": water, "rect": pygame.Rect(1020, 15, 50, 150)},
]
#the quiz boxes
boxes = [
    {"name": "box", "img": box, "rect": pygame.Rect(0, 0, 175, 175)},
    {"name": "box1", "img": box, "rect": pygame.Rect(160, 0, 150, 150)},
    {"name": "box2", "img": box, "rect": pygame.Rect(320, 0, 150, 150)},
    {"name": "box4", "img": box, "rect": pygame.Rect(480, 0, 150, 150)},
    {"name": "box5", "img": box, "rect": pygame.Rect(640, 0, 150, 150)},
    {"name": "box6", "img": box, "rect": pygame.Rect(800, 0, 150, 150)},
    {"name": "box7", "img": box, "rect": pygame.Rect(960, 0, 150, 150)},
]
# tells what happens when acid and bases reactions
reaction_map = {
    ("tube1", "acid1"): results[3],
    ("tube1", "acid2"): results[6],
    ("tube1", "acid3"): results[18],
    ("tube1", "base1"): results[9],
    ("tube1", "base2"): results[15],
    ("tube1", "base3"): results[12],
    ("tube1", "water"): results[0],
    ("tube2", "acid1"): results[4],
    ("tube2", "acid2"): results[7],
    ("tube2", "acid3"): results[19],
    ("tube2", "base1"): results[10],
    ("tube2", "base2"): results[16],
    ("tube2", "base3"): results[13],
    ("tube2", "water"): results[1],
    ("tube3", "acid1"): results[5],
    ("tube3", "acid2"): results[8],
    ("tube3", "acid3"): results[20],
    ("tube3", "base1"): results[11],
    ("tube3", "base2"): results[17],
    ("tube3", "base3"): results[14],
    ("tube3", "water"): results[2],
}
#list of clones(added later)
clones = []
#variables for draggin
dragging = None
offset_x = 0
offset_y = 0
# collision variable for boxes
collision_triggered = False
collision_triggered1 = False
collision_triggered2 = False
collision_triggered3 = False
collision_triggered4 = False
collision_triggered5 = False
collision_triggered6 = False

#tells what would happen when the tubes react
def check_reactions():
    for vial in clones:
        if not vial["name"].startswith("tube") or vial["name"] == "tube0" or vial.get("reacted"):
            continue
        for other in clones:
            if other["name"].startswith(("acid", "base", "water", "tube")):
                if vial["rect"].colliderect(other["rect"]):
                    result = reaction_map.get((vial["name"], other["name"]))
                    if result:
                        vial["img"] = result
                        vial["reacted"] = True
                        break

# Main loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        #starts to check if objects can react
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            check_reactions()
        #tracks location
        elif event.type == pygame.MOUSEBUTTONDOWN:
            pos = event.pos
            #is instructions up
        
            if showing_instructions:
                showing_instructions = False
                continue

            if instructions_rect.collidepoint(pos):
                showing_instructions = True
                continue

            for item in originals:
                if item["rect"].collidepoint(pos):
                    new_rect = item["img"].get_rect(topleft=(item["rect"].x + 10, item["rect"].y - 200))
                    clones.append({"name": item["name"], "img": item["img"], "rect": new_rect})
                    break
           
            for i in range(len(clones) - 1, -1, -1):
                if clones[i]["rect"].collidepoint(pos):
                    dragging = i
                    offset_x = clones[i]["rect"].x - pos[0]
                    offset_y = clones[i]["rect"].y - pos[1]
                    break
        if any(clone["img"] in (results[0], results[1], results[2]) and boxes[0]["rect"].colliderect(clone["rect"]) for clone in clones):
            if not collision_triggered:
                collision_triggered = True
                boxes[0]["img"] = gbox
                print("hello")
            else:
                collision_triggered = False
                boxes[0]["img"] = box
        if any(clone["img"] in (results[0], results[1], results[2]) and boxes[1]["rect"].colliderect(clone["rect"]) for clone in clones):
            if not collision_triggered:
                collision_triggered = True
                boxes[0]["img"] = gbox
                print("hello")
            else:
                collision_triggered = False
                boxes[0]["img"] = box   
        if any(clone["img"] in (results[0], results[1], results[2]) and boxes[2]["rect"].colliderect(clone["rect"]) for clone in clones):
            if not collision_triggered:
                    collision_triggered = True
                    boxes[0]["img"] = gbox
                    print("hello")
            else:
                collision_triggered = False
                boxes[0]["img"] = box  
        elif event.type == pygame.MOUSEBUTTONUP:
            dragging = None

        elif event.type == pygame.MOUSEMOTION and dragging is not None:
            pos = event.pos
            clones[dragging]["rect"].x = pos[0] + offset_x
            clones[dragging]["rect"].y = pos[1] + offset_y
    

    screen.fill(back)

    for item in originals:
        screen.blit(item["img"], item["rect"])
    for clone in clones:
        screen.blit(clone["img"], clone["rect"])
    for box_item in boxes:
        screen.blit(box_item["img"], box_item["rect"])
    for still in stillobjects:
        screen.blit(still["img"], still["rect"])

    screen.blit(instructions_icon, instructions_rect)

    if showing_instructions:
        screen.blit(instructions_big, (0, 0))

    pygame.display.flip()
    clock.tick(60)